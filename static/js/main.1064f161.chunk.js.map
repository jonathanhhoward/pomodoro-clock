{"version":3,"sources":["ClockControl.js","serviceWorker.js","index.js","App.js"],"names":["ClockControl","props","data","h2","div","button1","button2","id","name","className","class","text","onClick","callback","Boolean","window","location","hostname","match","ReactDOM","render","initialState","breakLength","sessionLength","timerLabel","timeLeft","startStop","useReducer","state","action","type","payload","dispatch","useEffect","timer","setInterval","clearInterval","document","getElementById","play","handleChangeLength","event","target","LIMIT","includes","breakData","sessionData","timerData","mm","Math","floor","ss","secToMinSec","load","src","preload","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1064f161.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function ClockControl (props) {\r\n  const {h2, div, button1, button2} = props.data\r\n  return (\r\n    <div id={props.name} className={'ClockControl ' + props.class}>\r\n      <h2 id={h2.id} className={h2.class}>\r\n        {h2.text}\r\n      </h2>\r\n      <div id={div.id} className={div.class}>\r\n        {div.text}\r\n      </div>\r\n      <button\r\n        id={button1.id}\r\n        className={button1.class}\r\n        onClick={button1.callback}\r\n      >\r\n        {button1.text}\r\n      </button>\r\n      <button\r\n        id={button2.id}\r\n        className={button2.class}\r\n        onClick={button2.callback}\r\n      >\r\n        {button2.text}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { useReducer, useEffect } from 'react'\r\nimport ClockControl from './ClockControl'\r\nimport './App.css'\r\n\r\nexport default function App () {\r\n  const PLUS = '+'\r\n  const MINUS = '-'\r\n  const START = 'START'\r\n  const STOP = 'STOP'\r\n  const RESET = 'RESET'\r\n  const SEC_PER_MIN = 60\r\n  const BREAK_LABEL = 'Break'\r\n  const SESSION_LABEL = 'Session'\r\n\r\n  const initialState = {\r\n    breakLength: 5,\r\n    sessionLength: 25,\r\n    timerLabel: SESSION_LABEL,\r\n    timeLeft: 25 * SEC_PER_MIN,\r\n    startStop: START,\r\n  }\r\n\r\n  const reducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'break-decrement':\r\n        return { ...state, breakLength: state.breakLength - 1 }\r\n      case 'break-increment':\r\n        return { ...state, breakLength: state.breakLength + 1 }\r\n      case 'update-break':\r\n        return { ...state, timeLeft: state.breakLength * SEC_PER_MIN }\r\n      case 'session-decrement':\r\n        return { ...state, sessionLength: state.sessionLength - 1 }\r\n      case 'session-increment':\r\n        return { ...state, sessionLength: state.sessionLength + 1 }\r\n      case 'update-session':\r\n        return { ...state, timeLeft: state.sessionLength * SEC_PER_MIN }\r\n      case 'toggle-startStop':\r\n        return {\r\n          ...state,\r\n          startStop: state.startStop === START ? STOP : START,\r\n        }\r\n      case 'countdown':\r\n        return { ...state, timeLeft: state.timeLeft - 1 }\r\n      case 'toggle-break':\r\n        return {\r\n          ...state,\r\n          timerLabel: BREAK_LABEL,\r\n          timeLeft: state.breakLength * SEC_PER_MIN,\r\n        }\r\n      case 'toggle-session':\r\n        return {\r\n          ...state,\r\n          timerLabel: SESSION_LABEL,\r\n          timeLeft: state.sessionLength * SEC_PER_MIN,\r\n        }\r\n      case 'reset':\r\n        return action.payload\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n  useEffect(() => {\r\n    let timer = null\r\n    if (state.startStop === STOP) {\r\n      timer = setInterval(() => {\r\n        dispatch({ type: 'countdown' })\r\n      }, 1000)\r\n    } else {\r\n      clearInterval(timer)\r\n    }\r\n    return () => clearInterval(timer)\r\n  }, [state.startStop])\r\n\r\n  useEffect(() => {\r\n    if (state.timeLeft !== 0) return\r\n    if (state.timerLabel === SESSION_LABEL) {\r\n      dispatch({ type: 'toggle-break' })\r\n    } else {\r\n      dispatch({ type: 'toggle-session' })\r\n    }\r\n    document.getElementById('beep').play()\r\n  }, [state.timerLabel, state.timeLeft])\r\n\r\n  const handleChangeLength = (event) => {\r\n    if (state.startStop === STOP) return\r\n    const action = event.target.id\r\n    const LIMIT = action.includes('decrement') ? 1 : 60\r\n    if (action.includes('break')) {\r\n      if (state.breakLength === LIMIT) return\r\n      dispatch({ type: action })\r\n      if (state.timerLabel === BREAK_LABEL) {\r\n        dispatch({ type: 'update-break' })\r\n      }\r\n    } else {\r\n      if (state.sessionLength === LIMIT) return\r\n      dispatch({ type: action })\r\n      if (state.timerLabel === SESSION_LABEL) {\r\n        dispatch({ type: 'update-session' })\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleStartStop = () => {\r\n    dispatch({ type: 'toggle-startStop' })\r\n  }\r\n\r\n  const handleReset = () => {\r\n    dispatch({ type: 'reset', payload: initialState })\r\n    document.getElementById('beep').load()\r\n  }\r\n\r\n  const secToMinSec = () => {\r\n    const mm = Math.floor(state.timeLeft / SEC_PER_MIN)\r\n    const ss = state.timeLeft % SEC_PER_MIN\r\n    return `${mm < 10 ? '0' + mm : mm}:${ss < 10 ? '0' + ss : ss}`\r\n  }\r\n\r\n  const breakData = {\r\n    h2: {\r\n      id: 'break-label',\r\n      class: null,\r\n      text: 'Break Length',\r\n    },\r\n    div: {\r\n      id: 'break-length',\r\n      class: 'length',\r\n      text: state.breakLength,\r\n    },\r\n    button1: {\r\n      id: 'break-decrement',\r\n      class: 'circle',\r\n      callback: handleChangeLength,\r\n      text: MINUS,\r\n    },\r\n    button2: {\r\n      id: 'break-increment',\r\n      class: 'circle',\r\n      callback: handleChangeLength,\r\n      text: PLUS,\r\n    },\r\n  }\r\n\r\n  const sessionData = {\r\n    h2: {\r\n      id: 'session-label',\r\n      class: null,\r\n      text: 'Session Length',\r\n    },\r\n    div: {\r\n      id: 'session-length',\r\n      class: 'length',\r\n      text: state.sessionLength,\r\n    },\r\n    button1: {\r\n      id: 'session-decrement',\r\n      class: 'circle',\r\n      callback: handleChangeLength,\r\n      text: MINUS,\r\n    },\r\n    button2: {\r\n      id: 'session-increment',\r\n      class: 'circle',\r\n      callback: handleChangeLength,\r\n      text: PLUS,\r\n    },\r\n  }\r\n\r\n  const timerData = {\r\n    h2: {\r\n      id: 'timer-label',\r\n      class: null,\r\n      text: state.timerLabel,\r\n    },\r\n    div: {\r\n      id: 'time-left',\r\n      class: 'time',\r\n      text: secToMinSec(),\r\n    },\r\n    button1: {\r\n      id: 'start_stop',\r\n      class: 'pill',\r\n      callback: handleStartStop,\r\n      text: state.startStop,\r\n    },\r\n    button2: {\r\n      id: 'reset',\r\n      class: 'pill',\r\n      callback: handleReset,\r\n      text: RESET,\r\n\r\n    },\r\n  }\r\n\r\n  return (\r\n    <div className={'clock'}>\r\n      <h1>Pomodoro Clock</h1>\r\n      <div className={'flexbox'}>\r\n        <ClockControl data={breakData}/>\r\n        <ClockControl data={sessionData}/>\r\n      </div>\r\n      <ClockControl data={timerData}/>\r\n      <audio id={'beep'} src={'beep.mp3'} preload={'auto'}/>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}