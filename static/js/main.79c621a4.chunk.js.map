{"version":3,"sources":["beep.mp3","components/ClockControl.js","components/BreakControl.js","components/SessionControl.js","formatSecondsAsMMSS.js","components/TimerControl.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ClockControl","h2","div","button1","button2","className","id","class","text","onClick","callback","disabled","BreakControl","state","dispatch","breakProps","breakLength","type","timerStatus","SessionControl","sessionProps","sessionLength","formatSecondsAsMMSS","seconds","mm","Math","floor","ss","TimerControl","initialState","useEffect","payload","timerType","timerLength","document","getElementById","play","timer","setInterval","clearInterval","timerProps","target","textContent","load","sessionLengthReducer","action","breakLengthReducer","timerLengthReducer","timerTypeReducer","timerStatusReducer","reducer","App","useReducer","src","beepSound","preload","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79c621a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.d5acce1f.mp3\";","import React from 'react';\n\nfunction ClockControl({ h2, div, button1, button2 }) {\n  return (\n    <div className=\"ClockControl\">\n      <h2 id={h2.id} className={h2.class}>\n        {h2.text}\n      </h2>\n      <div id={div.id} className={div.class}>\n        {div.text}\n      </div>\n      <button\n        id={button1.id}\n        className={button1.class}\n        onClick={button1.callback}\n        disabled={button1.disabled}\n      >\n        {button1.text}\n      </button>\n      <button\n        id={button2.id}\n        className={button2.class}\n        onClick={button2.callback}\n        disabled={button2.disabled}\n      >\n        {button2.text}\n      </button>\n    </div>\n  );\n}\n\nexport default ClockControl;\n","import React from 'react';\r\nimport ClockControl from './ClockControl';\r\n\r\nfunction BreakControl({ state, dispatch }) {\r\n  const breakProps = {\r\n    h2: {\r\n      id: 'break-label',\r\n      class: null,\r\n      text: 'Break Length',\r\n    },\r\n    div: {\r\n      id: 'break-length',\r\n      class: 'length',\r\n      text: state.breakLength,\r\n    },\r\n    button1: {\r\n      id: 'break-decrement',\r\n      class: 'circle',\r\n      callback: () => dispatch({ type: 'breakLength-reduced' }),\r\n      disabled: state.timerStatus === 'STARTED' || state.breakLength === 1,\r\n      text: '-',\r\n    },\r\n    button2: {\r\n      id: 'break-increment',\r\n      class: 'circle',\r\n      callback: () => dispatch({ type: 'breakLength-increased' }),\r\n      disabled: state.timerStatus === 'STARTED' || state.breakLength === 60,\r\n      text: '+',\r\n    },\r\n  };\r\n\r\n  return <ClockControl {...breakProps} />;\r\n}\r\n\r\nexport default BreakControl;\r\n","import React from 'react';\r\nimport ClockControl from './ClockControl';\r\n\r\nfunction SessionControl({ state, dispatch }) {\r\n  const sessionProps = {\r\n    h2: {\r\n      id: 'session-label',\r\n      class: null,\r\n      text: 'Session Length',\r\n    },\r\n    div: {\r\n      id: 'session-length',\r\n      class: 'length',\r\n      text: state.sessionLength,\r\n    },\r\n    button1: {\r\n      id: 'session-decrement',\r\n      class: 'circle',\r\n      callback: () => dispatch({ type: 'sessionLength-reduced' }),\r\n      disabled: state.timerStatus === 'STARTED' || state.sessionLength === 1,\r\n      text: '-',\r\n    },\r\n    button2: {\r\n      id: 'session-increment',\r\n      class: 'circle',\r\n      callback: () => dispatch({ type: 'sessionLength-increased' }),\r\n      disabled: state.timerStatus === 'STARTED' || state.sessionLength === 60,\r\n      text: '+',\r\n    },\r\n  };\r\n\r\n  return <ClockControl {...sessionProps} />;\r\n}\r\n\r\nexport default SessionControl;\r\n","function formatSecondsAsMMSS(seconds) {\n  const mm = Math.floor(seconds / 60);\n  const ss = seconds % 60;\n  return `${mm < 10 ? '0' + mm : mm}:${ss < 10 ? '0' + ss : ss}`;\n}\n\nexport default formatSecondsAsMMSS;\n","import React, { useEffect } from 'react';\r\nimport ClockControl from './ClockControl';\r\nimport formatSecondsAsMMSS from '../formatSecondsAsMMSS';\r\n\r\nfunction TimerControl({ state, dispatch, initialState }) {\r\n  useEffect(\r\n    function updateTimerLength() {\r\n      dispatch({\r\n        type: 'timerLength-changed',\r\n        payload:\r\n          state.timerType === 'Session'\r\n            ? state.sessionLength * 60\r\n            : state.breakLength * 60,\r\n      });\r\n    },\r\n    [state.timerType, state.sessionLength, state.breakLength, dispatch]\r\n  );\r\n\r\n  useEffect(function switchTimerType() {\r\n    if (state.timerLength !== 0) return;\r\n\r\n    dispatch({\r\n      type: 'timer-ended',\r\n      payload:\r\n        state.timerType === 'Session'\r\n          ? state.breakLength * 60\r\n          : state.sessionLength * 60,\r\n    });\r\n\r\n    document.getElementById('beep').play();\r\n  });\r\n\r\n  useEffect(\r\n    function startStopTimer() {\r\n      let timer = null;\r\n\r\n      if (state.timerStatus === 'STARTED') {\r\n        timer = setInterval(() => {\r\n          dispatch({ type: 'countdown' });\r\n        }, 1000);\r\n      } else {\r\n        clearInterval(timer);\r\n      }\r\n\r\n      return () => clearInterval(timer);\r\n    },\r\n    [state.timerStatus, dispatch]\r\n  );\r\n\r\n  function handleStartStopClick({ target }) {\r\n    dispatch({\r\n      type: target.textContent === 'START' ? 'timer-started' : 'timer-stopped',\r\n    });\r\n  }\r\n\r\n  function handleResetClick() {\r\n    dispatch({ type: 'reset', payload: initialState });\r\n    document.getElementById('beep').load();\r\n  }\r\n\r\n  const timerProps = {\r\n    h2: {\r\n      id: 'timer-label',\r\n      class: null,\r\n      text: state.timerType,\r\n    },\r\n    div: {\r\n      id: 'time-left',\r\n      class: 'time',\r\n      text: formatSecondsAsMMSS(state.timerLength),\r\n    },\r\n    button1: {\r\n      id: 'start_stop',\r\n      class: 'pill',\r\n      callback: handleStartStopClick,\r\n      disabled: false,\r\n      text: state.timerStatus === 'STOPPED' ? 'START' : 'STOP',\r\n    },\r\n    button2: {\r\n      id: 'reset',\r\n      class: 'pill',\r\n      callback: handleResetClick,\r\n      disabled: false,\r\n      text: 'RESET',\r\n    },\r\n  };\r\n\r\n  return <ClockControl {...timerProps} />;\r\n}\r\n\r\nexport default TimerControl;\r\n","function reducer(state, action) {\r\n  if (action.type === 'reset') return action.payload;\r\n\r\n  return {\r\n    sessionLength: sessionLengthReducer(state.sessionLength, action),\r\n    breakLength: breakLengthReducer(state.breakLength, action),\r\n    timerLength: timerLengthReducer(state.timerLength, action),\r\n    timerType: timerTypeReducer(state.timerType, action),\r\n    timerStatus: timerStatusReducer(state.timerStatus, action),\r\n  };\r\n}\r\n\r\nfunction sessionLengthReducer(sessionLength, action) {\r\n  switch (action.type) {\r\n    case 'sessionLength-reduced':\r\n      return sessionLength - 1;\r\n    case 'sessionLength-increased':\r\n      return sessionLength + 1;\r\n    default:\r\n      return sessionLength;\r\n  }\r\n}\r\n\r\nfunction breakLengthReducer(breakLength, action) {\r\n  switch (action.type) {\r\n    case 'breakLength-reduced':\r\n      return breakLength - 1;\r\n    case 'breakLength-increased':\r\n      return breakLength + 1;\r\n    default:\r\n      return breakLength;\r\n  }\r\n}\r\n\r\nfunction timerLengthReducer(timerLength, action) {\r\n  switch (action.type) {\r\n    case 'timerLength-changed':\r\n    case 'timer-ended':\r\n      return action.payload;\r\n    case 'countdown':\r\n      return timerLength - 1;\r\n    default:\r\n      return timerLength;\r\n  }\r\n}\r\n\r\nfunction timerTypeReducer(timerType, action) {\r\n  switch (action.type) {\r\n    case 'timer-ended':\r\n      return timerType === 'Session' ? 'Break' : 'Session';\r\n    default:\r\n      return timerType;\r\n  }\r\n}\r\n\r\nfunction timerStatusReducer(timerStatus, action) {\r\n  switch (action.type) {\r\n    case 'timer-started':\r\n      return 'STARTED';\r\n    case 'timer-stopped':\r\n      return 'STOPPED';\r\n    default:\r\n      return timerStatus;\r\n  }\r\n}\r\n\r\nexport default reducer;\r\n","import React, { useReducer } from 'react';\r\nimport BreakControl from './components/BreakControl';\r\nimport SessionControl from './components/SessionControl';\r\nimport TimerControl from './components/TimerControl';\r\nimport reducer from './reducer';\r\nimport beepSound from './beep.mp3';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const initialState = {\r\n    breakLength: 5,\r\n    sessionLength: 25,\r\n    timerLength: 1500,\r\n    timerType: 'Session',\r\n    timerStatus: 'STOPPED',\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <div className=\"clock\">\r\n      <h1>Pomodoro Clock</h1>\r\n      <div className=\"flexbox\">\r\n        <BreakControl state={state} dispatch={dispatch} />\r\n        <SessionControl state={state} dispatch={dispatch} />\r\n      </div>\r\n      <TimerControl\r\n        state={state}\r\n        dispatch={dispatch}\r\n        initialState={initialState}\r\n      />\r\n      <audio id=\"beep\" src={beepSound} preload=\"auto\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}