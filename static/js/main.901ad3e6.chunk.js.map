{"version":3,"sources":["beep.mp3","components/ClockControl.js","components/BreakControl.js","components/SessionControl.js","formatSecondsAsMMSS.js","components/TimerControl.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ClockControl","data","h2","div","button1","button2","className","id","class","text","onClick","callback","BreakControl","breakLength","onChangeBreak","breakData","SessionControl","sessionLength","onChangeSession","sessionData","formatSecondsAsMMSS","seconds","mm","Math","floor","ss","TimerControl","timerLabel","timeLeft","startStop","onClickStartStop","onClickReset","timerData","sessionLengthReducer","action","type","breakLengthReducer","timerLabelReducer","startStopReducer","timeLeftReducer","state","reducer","payload","App","initialState","useReducer","dispatch","useEffect","timer","setInterval","clearInterval","document","getElementById","play","event","target","LIMIT","includes","load","src","beepSound","preload","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.901ad3e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beep.d5acce1f.mp3\";","import React from 'react'\r\n\r\nfunction ClockControl ({ data }) {\r\n  const { h2, div, button1, button2 } = data\r\n  return (\r\n    <div className=\"ClockControl\">\r\n      <h2 id={h2.id} className={h2.class}>\r\n        {h2.text}\r\n      </h2>\r\n      <div id={div.id} className={div.class}>\r\n        {div.text}\r\n      </div>\r\n      <button\r\n        id={button1.id}\r\n        className={button1.class}\r\n        onClick={button1.callback}\r\n      >\r\n        {button1.text}\r\n      </button>\r\n      <button\r\n        id={button2.id}\r\n        className={button2.class}\r\n        onClick={button2.callback}\r\n      >\r\n        {button2.text}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ClockControl\r\n","import React from 'react'\r\nimport ClockControl from './ClockControl'\r\n\r\nfunction BreakControl ({ breakLength, onChangeBreak }) {\r\n  const breakData = {\r\n    h2: {\r\n      id: 'break-label',\r\n      class: null,\r\n      text: 'Break Length'\r\n    },\r\n    div: {\r\n      id: 'break-length',\r\n      class: 'length',\r\n      text: breakLength\r\n    },\r\n    button1: {\r\n      id: 'break-decrement',\r\n      class: 'circle',\r\n      callback: onChangeBreak,\r\n      text: '-'\r\n    },\r\n    button2: {\r\n      id: 'break-increment',\r\n      class: 'circle',\r\n      callback: onChangeBreak,\r\n      text: '+'\r\n    }\r\n  }\r\n\r\n  return <ClockControl data={breakData}/>\r\n}\r\n\r\nexport default BreakControl\r\n","import React from 'react'\r\nimport ClockControl from './ClockControl'\r\n\r\nfunction SessionControl ({ sessionLength, onChangeSession }) {\r\n  const sessionData = {\r\n    h2: {\r\n      id: 'session-label',\r\n      class: null,\r\n      text: 'Session Length'\r\n    },\r\n    div: {\r\n      id: 'session-length',\r\n      class: 'length',\r\n      text: sessionLength\r\n    },\r\n    button1: {\r\n      id: 'session-decrement',\r\n      class: 'circle',\r\n      callback: onChangeSession,\r\n      text: '-'\r\n    },\r\n    button2: {\r\n      id: 'session-increment',\r\n      class: 'circle',\r\n      callback: onChangeSession,\r\n      text: '+'\r\n    }\r\n  }\r\n\r\n  return <ClockControl data={sessionData}/>\r\n}\r\n\r\nexport default SessionControl\r\n","function formatSecondsAsMMSS (seconds) {\r\n  const mm = Math.floor(seconds / 60)\r\n  const ss = seconds % 60\r\n  return `${mm < 10 ? '0' + mm : mm}:${ss < 10 ? '0' + ss : ss}`\r\n}\r\n\r\nexport default formatSecondsAsMMSS\r\n","import React from 'react'\r\nimport ClockControl from './ClockControl'\r\nimport formatSecondsAsMMSS from '../formatSecondsAsMMSS'\r\n\r\nfunction TimerControl ({\r\n  timerLabel,\r\n  timeLeft,\r\n  startStop,\r\n  onClickStartStop,\r\n  onClickReset\r\n}) {\r\n  const timerData = {\r\n    h2: {\r\n      id: 'timer-label',\r\n      class: null,\r\n      text: timerLabel\r\n    },\r\n    div: {\r\n      id: 'time-left',\r\n      class: 'time',\r\n      text: formatSecondsAsMMSS(timeLeft)\r\n    },\r\n    button1: {\r\n      id: 'start_stop',\r\n      class: 'pill',\r\n      callback: onClickStartStop,\r\n      text: startStop\r\n    },\r\n    button2: {\r\n      id: 'reset',\r\n      class: 'pill',\r\n      callback: onClickReset,\r\n      text: 'RESET'\r\n    }\r\n  }\r\n\r\n  return <ClockControl data={timerData}/>\r\n}\r\n\r\nexport default TimerControl\r\n","function reducer (state, action) {\r\n  if (action.type === 'reset') {\r\n    return action.payload\r\n  }\r\n\r\n  return {\r\n    sessionLength: sessionLengthReducer(state.sessionLength, action),\r\n    breakLength: breakLengthReducer(state.breakLength, action),\r\n    timerLabel: timerLabelReducer(state.timerLabel, action),\r\n    startStop: startStopReducer(state.startStop, action),\r\n    timeLeft: timeLeftReducer(state, action)\r\n  }\r\n}\r\n\r\nfunction sessionLengthReducer (sessionLength, action) {\r\n  switch (action.type) {\r\n    case 'session-decrement':\r\n      return sessionLength - 1\r\n    case 'session-increment':\r\n      return sessionLength + 1\r\n    default:\r\n      return sessionLength\r\n  }\r\n}\r\n\r\nfunction breakLengthReducer (breakLength, action) {\r\n  switch (action.type) {\r\n    case 'break-decrement':\r\n      return breakLength - 1\r\n    case 'break-increment':\r\n      return breakLength + 1\r\n    default:\r\n      return breakLength\r\n  }\r\n}\r\n\r\nfunction timerLabelReducer (timerLabel, action) {\r\n  switch (action.type) {\r\n    case 'toggle-session':\r\n      return 'Session'\r\n    case 'toggle-break':\r\n      return 'Break'\r\n    default:\r\n      return timerLabel\r\n  }\r\n}\r\n\r\nfunction startStopReducer (startStop, action) {\r\n  switch (action.type) {\r\n    case 'toggle-startStop':\r\n      return (startStop === 'START') ? 'STOP' : 'START'\r\n    default:\r\n      return startStop\r\n  }\r\n}\r\n\r\nfunction timeLeftReducer (state, action) {\r\n  switch (action.type) {\r\n    case 'update-session':\r\n    case 'toggle-session':\r\n      return state.sessionLength * 60\r\n    case 'update-break':\r\n    case 'toggle-break':\r\n      return state.breakLength * 60\r\n    case 'countdown':\r\n      return state.timeLeft - 1\r\n    default:\r\n      return state.timeLeft\r\n  }\r\n}\r\n\r\nexport default reducer\r\n","import React, { useEffect, useReducer } from 'react'\r\nimport BreakControl from './components/BreakControl'\r\nimport SessionControl from './components/SessionControl'\r\nimport TimerControl from './components/TimerControl'\r\nimport reducer from './reducer'\r\nimport beepSound from './beep.mp3'\r\nimport './App.scss'\r\n\r\nfunction App () {\r\n  const initialState = {\r\n    breakLength: 5,\r\n    sessionLength: 25,\r\n    timerLabel: 'Session',\r\n    timeLeft: 25 * 60,\r\n    startStop: 'START'\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n\r\n  useEffect(() => {\r\n    let timer = null\r\n\r\n    if (state.startStop === 'STOP') {\r\n      timer = setInterval(() => {\r\n        dispatch({ type: 'countdown' })\r\n      }, 1000)\r\n    } else {\r\n      clearInterval(timer)\r\n    }\r\n\r\n    return () => clearInterval(timer)\r\n  }, [state.startStop])\r\n\r\n  useEffect(() => {\r\n    if (state.timeLeft !== 0)\r\n      return\r\n\r\n    if (state.timerLabel === 'Session') {\r\n      dispatch({ type: 'toggle-break' })\r\n    } else {\r\n      dispatch({ type: 'toggle-session' })\r\n    }\r\n\r\n    document.getElementById('beep').play()\r\n  }, [state.timerLabel, state.timeLeft])\r\n\r\n  function handleChangeBreak (event) {\r\n    if (state.startStop === 'STOP')\r\n      return\r\n\r\n    const action = event.target.id\r\n    const LIMIT = action.includes('decrement') ? 1 : 60\r\n    if (state.breakLength === LIMIT)\r\n      return\r\n\r\n    dispatch({ type: action })\r\n    if (state.timerLabel === 'Break')\r\n      dispatch({ type: 'update-break' })\r\n  }\r\n\r\n  function handleChangeSession (event) {\r\n    if (state.startStop === 'STOP')\r\n      return\r\n\r\n    const action = event.target.id\r\n    const LIMIT = action.includes('decrement') ? 1 : 60\r\n    if (state.sessionLength === LIMIT)\r\n      return\r\n\r\n    dispatch({ type: action })\r\n    if (state.timerLabel === 'Session')\r\n      dispatch({ type: 'update-session' })\r\n  }\r\n\r\n  function handleStartStop () {\r\n    dispatch({ type: 'toggle-startStop' })\r\n  }\r\n\r\n  function handleReset () {\r\n    dispatch({ type: 'reset', payload: initialState })\r\n    document.getElementById('beep').load()\r\n  }\r\n\r\n  return (\r\n    <div className=\"clock\">\r\n      <h1>Pomodoro Clock</h1>\r\n      <div className=\"flexbox\">\r\n        <BreakControl\r\n          breakLength={state.breakLength}\r\n          onChangeBreak={handleChangeBreak}\r\n        />\r\n        <SessionControl\r\n          sessionLength={state.sessionLength}\r\n          onChangeSession={handleChangeSession}\r\n        />\r\n      </div>\r\n      <TimerControl\r\n        timerLabel={state.timerLabel}\r\n        timeLeft={state.timeLeft}\r\n        startStop={state.startStop}\r\n        onClickStartStop={handleStartStop}\r\n        onClickReset={handleReset}\r\n      />\r\n      <audio id=\"beep\" src={beepSound} preload=\"auto\"/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}